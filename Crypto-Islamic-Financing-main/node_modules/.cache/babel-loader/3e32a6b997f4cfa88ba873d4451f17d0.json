{"ast":null,"code":"var _jsxFileName = \"/Users/453543/port/wallet-adapter/packages/material-ui-starter/src/Wallet.tsx\",\n    _s = $RefreshSig$();\n\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { WalletProvider } from '@solana/wallet-adapter-react';\nimport { getLedgerWallet, getMathWallet, getPhantomWallet, getSolflareWallet, getSolletWallet, getSolongWallet, getTorusWallet } from '@solana/wallet-adapter-wallets';\nimport { useSnackbar } from 'notistack';\nimport React, { useCallback, useMemo } from 'react';\nimport Navigation from './Navigation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wallet = () => {\n  _s();\n\n  // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n  // Only the wallets you want to support will be compiled into your application\n  const wallets = useMemo(() => [getPhantomWallet(), getSolflareWallet(), getTorusWallet({\n    options: {\n      clientId: 'BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ'\n    }\n  }), getLedgerWallet(), getSolongWallet(), getMathWallet(), getSolletWallet()], []);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const onError = useCallback(error => {\n    enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, {\n      variant: 'error'\n    });\n    console.error(error);\n  }, [enqueueSnackbar]);\n  return /*#__PURE__*/_jsxDEV(WalletProvider, {\n    wallets: wallets,\n    onError: onError,\n    autoConnect: true,\n    children: /*#__PURE__*/_jsxDEV(WalletDialogProvider, {\n      children: /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Wallet, \"IzRF2rMDAIUHpnv0l3f2YM9THdI=\", false, function () {\n  return [useSnackbar];\n});\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/Users/453543/port/wallet-adapter/packages/material-ui-starter/src/Wallet.tsx"],"names":["WalletDialogProvider","WalletProvider","getLedgerWallet","getMathWallet","getPhantomWallet","getSolflareWallet","getSolletWallet","getSolongWallet","getTorusWallet","useSnackbar","React","useCallback","useMemo","Navigation","Wallet","wallets","options","clientId","enqueueSnackbar","onError","error","message","name","variant","console"],"mappings":";;;AACA,SAASA,oBAAT,QAAqC,oCAArC;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SACIC,eADJ,EAEIC,aAFJ,EAGIC,gBAHJ,EAIIC,iBAJJ,EAKIC,eALJ,EAMIC,eANJ,EAOIC,cAPJ,QAQO,gCARP;AASA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,KAAP,IAAoBC,WAApB,EAAiCC,OAAjC,QAAgD,OAAhD;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,MAAU,GAAG,MAAM;AAAA;;AACrB;AACA;AACA,QAAMC,OAAO,GAAGH,OAAO,CACnB,MAAM,CACFR,gBAAgB,EADd,EAEFC,iBAAiB,EAFf,EAGFG,cAAc,CAAC;AACXQ,IAAAA,OAAO,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL;AADE,GAAD,CAHZ,EAQFf,eAAe,EARb,EASFK,eAAe,EATb,EAUFJ,aAAa,EAVX,EAWFG,eAAe,EAXb,CADa,EAcnB,EAdmB,CAAvB;AAiBA,QAAM;AAAEY,IAAAA;AAAF,MAAsBT,WAAW,EAAvC;AACA,QAAMU,OAAO,GAAGR,WAAW,CACtBS,KAAD,IAAwB;AACpBF,IAAAA,eAAe,CAACE,KAAK,CAACC,OAAN,GAAiB,GAAED,KAAK,CAACE,IAAK,KAAIF,KAAK,CAACC,OAAQ,EAAhD,GAAoDD,KAAK,CAACE,IAA3D,EAAiE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAjE,CAAf;AACAC,IAAAA,OAAO,CAACJ,KAAR,CAAcA,KAAd;AACH,GAJsB,EAKvB,CAACF,eAAD,CALuB,CAA3B;AAQA,sBACI,QAAC,cAAD;AAAgB,IAAA,OAAO,EAAEH,OAAzB;AAAkC,IAAA,OAAO,EAAEI,OAA3C;AAAoD,IAAA,WAAW,MAA/D;AAAA,2BACI,QAAC,oBAAD;AAAA,6BACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CApCD;;GAAML,M;UAoB0BL,W;;;KApB1BK,M;AAsCN,eAAeA,MAAf","sourcesContent":["import { WalletError } from '@solana/wallet-adapter-base';\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\nimport { WalletProvider } from '@solana/wallet-adapter-react';\nimport {\n    getLedgerWallet,\n    getMathWallet,\n    getPhantomWallet,\n    getSolflareWallet,\n    getSolletWallet,\n    getSolongWallet,\n    getTorusWallet,\n} from '@solana/wallet-adapter-wallets';\nimport { useSnackbar } from 'notistack';\nimport React, { FC, useCallback, useMemo } from 'react';\nimport Navigation from './Navigation';\n\nconst Wallet: FC = () => {\n    // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n    // Only the wallets you want to support will be compiled into your application\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSolflareWallet(),\n            getTorusWallet({\n                options: {\n                    clientId: 'BOM5Cl7PXgE9Ylq1Z1tqzhpydY0RVr8k90QQ85N7AKI5QGSrr9iDC-3rvmy0K_hF0JfpLMiXoDhta68JwcxS1LQ',\n                },\n            }),\n            getLedgerWallet(),\n            getSolongWallet(),\n            getMathWallet(),\n            getSolletWallet(),\n        ],\n        []\n    );\n\n    const { enqueueSnackbar } = useSnackbar();\n    const onError = useCallback(\n        (error: WalletError) => {\n            enqueueSnackbar(error.message ? `${error.name}: ${error.message}` : error.name, { variant: 'error' });\n            console.error(error);\n        },\n        [enqueueSnackbar]\n    );\n\n    return (\n        <WalletProvider wallets={wallets} onError={onError} autoConnect>\n            <WalletDialogProvider>\n                <Navigation />\n            </WalletDialogProvider>\n        </WalletProvider>\n    );\n};\n\nexport default Wallet;\n"]},"metadata":{},"sourceType":"module"}